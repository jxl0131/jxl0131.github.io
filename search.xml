<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>b站直播听歌</title>
    <url>/2023/01/22/b%E7%AB%99%E7%9B%B4%E6%92%AD%E5%90%AC%E6%AD%8C/</url>
    <content><![CDATA[<ol>
<li>下载弹幕姬，下载网易云喵和点歌姬插件解压放入。</li>
<li>EDGE打开b站，直播-鼠标放头像上-我的直播间-看直播间id&#x3D;24601711-开播，id输入弹幕姬接入直播间</li>
</ol>
]]></content>
      <tags>
        <tag>b站</tag>
      </tags>
  </entry>
  <entry>
    <title>周报： EMLight改为SHLight</title>
    <url>/2023/02/09/EMLight%E6%94%B9%E4%B8%BASHLight/</url>
    <content><![CDATA[<h1 id="本周拟定工作计划"><a href="#本周拟定工作计划" class="headerlink" title="本周拟定工作计划"></a>本周拟定工作计划</h1><!-- 填写上周周报中制定的本周工作计划 -->
<ol>
<li>尝试把EMLight从SG模型改成SH模型，训练网络从crop中回归出SH系数。</li>
</ol>
<h1 id="本周实际完成工作总结"><a href="#本周实际完成工作总结" class="headerlink" title="本周实际完成工作总结"></a>本周实际完成工作总结</h1><!-- 逐条概述本周实际开展的主要工作 -->

<p>按照以下步骤完成：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> LavalinDoor数据集预处理代码：求hdr全景贴图的SH系数</li>
<li><input checked="" disabled="" type="checkbox"> 改写EMLight的data.py、Densenet.py、train.py，分别实现模型加载sh系数、模型预测参数调整、SHLight模型训练。</li>
<li><input checked="" disabled="" type="checkbox"> 初次训练，设定epoch为2000次。数据集规模为800张图片。</li>
</ul>
<h1 id="本周实际完成工作详述"><a href="#本周实际完成工作详述" class="headerlink" title="本周实际完成工作详述"></a>本周实际完成工作详述</h1><!-- 根据上述工作概述，逐条详细描述算法设计、实验情况等。可将实验图表及描述作为附件上传 -->

<h2 id="SH细究"><a href="#SH细究" class="headerlink" title="SH细究"></a>SH细究</h2><p>上周的工作是学会使用pyshtools包，从全景图中求球谐系数并用较少的低阶系数复原图像。实验结果已经挂在我的这篇<a href="https://www.jixinlong.top/2023/02/01/%E6%A0%B9%E6%8D%AE%E5%85%A8%E6%99%AF%E8%B4%B4%E5%9B%BE%E6%B1%82%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0/#SH%E5%88%9D%E6%8E%A2">博客</a>上“SH初探”部分。从结果看，复原效果符合预期。</p>
<p>但是pyshtools包及其类似工具在做球谐变换的时候提供了很多参数，这些我之前没有用到。例如球谐基底的不同normalization形式，以及Condon-Shortley phase是否在球谐基底中启用，这些都表明SH是一种方法，但是SH的基底可以有多种形式。</p>
<p>后来我联系到论文V. Gkitsas, N. Zioulis, F. Alvarez, D. Zarpalas, and P. Daras, “Deep Lighting Environment Map Estimation from Spherical Panoramas,” May 2020, doi: 10.48550&#x2F;arXiv.2005.08000.的作者，在他指引下找到他们见刊论文使用的SH代码。通过阅读代码和做实验，我确认了他们在做球谐光照时使用的normalization方式和Condon-Shortley phase，与他们保持一致。<br>这部分的详细过程也记录在<a href="https://www.jixinlong.top/2023/02/01/%E6%A0%B9%E6%8D%AE%E5%85%A8%E6%99%AF%E8%B4%B4%E5%9B%BE%E6%B1%82%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0/#%E7%90%83%E8%B0%90%E5%9F%BA%E5%BA%95%E4%B8%8D%E6%AD%A2%E4%B8%80%E7%A7%8D">博客</a>中，写在“SH初探”部分后面的两部分。</p>
<h2 id="EMLight改写"><a href="#EMLight改写" class="headerlink" title="EMLight改写"></a>EMLight改写</h2><p>使用上述代码处理了LAVAL数据集，得到19557张全景环境贴图的SH系数，和EMLight保存光参数的方式一样，保存为pkl文件。</p>
<p>EMLight是开源的SG光照模型代码。我保持使用的模型框架不动，将模型输出从原先的光分布、光强、颜色等参数改为简单的27个SH系数，命名新的模型为SHLight。然后改写了data.py，使得模型能够调用data.py加载数据集到模型中。接着改写train.py，和EMLight一样训练的过程中将预测出的SH系数重建成环境贴图，使得训练过程中结果能够预览。loss等写入tensorboard，能够观察loss的变化趋势。</p>
<h3 id="SHLight初次训练效果"><a href="#SHLight初次训练效果" class="headerlink" title="SHLight初次训练效果"></a>SHLight初次训练效果</h3><p>在800张图像上训练，训练2000轮，结束后在另外100张图像上测试模型对SH系数的预测效果。每张图的右上部分是GT效果，右下部分是根据预测出的SH系数可视化效果图。可以看到预测效果是不理想的。<br><img src="/../images/SHLight%E5%88%9D%E6%AC%A1%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C.png" alt="SHLight初次训练效果"></p>
<p>但是该模型的loss又是一直收敛的：<br><img src="/../images/SHLight%E5%88%9D%E6%AC%A1%E8%AE%AD%E7%BB%83loss.png" alt="SHLight初次训练loss"></p>
<p>分析原因可能是：</p>
<ol>
<li>训练次数还不够，没达到收敛</li>
<li>loss函数设计的过于简单，SH不同阶的loss可能需要施加不同的权重，或者在添加别的类项的loss例如render loss。这个下周参考下别的论文。</li>
</ol>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>无</p>
<h1 id="下周工作计划"><a href="#下周工作计划" class="headerlink" title="下周工作计划"></a>下周工作计划</h1><!-- 针对本周工作存在的问题，概述下周的工作内容 -->
<ol>
<li>简单阅读下开源SH光照网络模型“shlight”的代码，比较他们的网络训练和我的SHLight的不同。</li>
</ol>
<h1 id="需要协调与支援"><a href="#需要协调与支援" class="headerlink" title="需要协调与支援"></a>需要协调与支援</h1><!-- 额外描述所需硬件、软件及人手 -->]]></content>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>mc服务器维护</title>
    <url>/2023/01/20/mc%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<h2 id="开服"><a href="#开服" class="headerlink" title="开服"></a>开服</h2><p>在ubuntu上启动一个所有人可进的游戏java版mc服务器</p>
<ul>
<li>自行安装jdk</li>
</ul>
<p>ubuntu安装java很简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openjdk-14-jdk</span><br></pre></td></tr></table></figure>

<p>多个java同时存在，切换当前的java环境:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jxl@jxl-Inspiron-5580:~/下载$ sudo update-alternatives --config java</span><br><span class="line">有 2 个候选项可用于替换 java (提供 /usr/bin/java)。</span><br><span class="line"></span><br><span class="line">  选择       路径                                          优先级  状态</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">  0            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      自动模式</span><br><span class="line">* 1            /opt/jdk/jdk1.8.0_311/bin/java                   100       手动模式</span><br><span class="line">  2            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      手动模式</span><br><span class="line"></span><br><span class="line">要维持当前值[*]请按&lt;回车键&gt;，或者键入选择的编号：0               </span><br><span class="line">update-alternatives: 使用 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java 来在自动模式中提供 /usr/bin/java (java)</span><br><span class="line">jxl@jxl-Inspiron-5580:~/下载$ java -showversion</span><br><span class="line">openjdk version &quot;1.8.0_312&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_312-8u312-b07-0ubuntu1~18.04-b07)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.312-b07, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果是windows，到各种镜像站找到jdk或openjdk的.exe安装包，一路确认；或者直接复制别人Program Files&#x2F;java&#x2F;下的对应版本的java文件夹到自己电脑这边。在脚本里直接指定java.exe所在的绝对路径就可以轻松区别java版本。</p>
<ul>
<li><p>初次运行<br>-Xms后面是最小的内存，-Xmx 是最大的内存，这里大家可以根据自己的服务器配置而定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Xms1G -Xmx1G -jar server.jar nogui</span><br></pre></td></tr></table></figure></li>
<li><p>上一次运行后会生成eula.txt，修改它，即同意条款</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim eula.txt</span><br></pre></td></tr></table></figure></li>
<li><p>再次运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar -Xms512M -Xmx2048M server.jar nogui</span><br></pre></td></tr></table></figure></li>
<li><p>上一次运行后会生成server.properties等文件<br> 把server.properties中的正版验证online-mode修改为false，这样非正版玩家都可以进入了。</p>
</li>
<li><p>加装forge（可选）<br>forge是加装在原版上的一个接口，用户连接原版服务器（或客户端）和mods。官网有两种forge提供：低版本的mc可以下载universal版本的forge，所有版本都有installer版的forge。<strong>理论上来说，在ubuntu上运行installer之后会生成universal版本的forge。</strong>如果有现成的universal版本，肯定先试一下。但是一般来说没有。<br>所以，</p>
<ul>
<li><p>在ubuntu上运行forge installer<br>将forge文件放入server.jar同目录。然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar forge-1.12.2-14.23.4.2705-installer.jar -nogui -serverInstall</span><br></pre></td></tr></table></figure>
<p>等待一段时间后将产生的forge-1.12.2-14.23.4.2705-universal.jar当作纯净版的server.jar一样重新启动配置一遍即可。</p>
</li>
<li><p>在本机上执行完installer将产生的所有文件整体xftp传到ubuntu<br>然后将forge-1.16.5-36.2.30.jar当成之前纯净版的server.jar即可。</p>
</li>
</ul>
</li>
</ul>
<hr>
<p>假如你已经在windows、ubuntu中用诸如裸开、cloudron、docker成功跑起了服务器。这里整理一些维护常识。</p>
<h2 id="防崩溃"><a href="#防崩溃" class="headerlink" title="防崩溃"></a>防崩溃</h2><ul>
<li><p>编写简单循环的脚本（start.sh），使服务器崩溃后能自动重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-16-2-ubuntu:~/mcf16.5$ cat start.sh </span><br><span class="line">#!/bin/sh</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">#此处填写启动mc服务器的命令</span><br><span class="line">      java -server -XX:-UseVMInterruptibleIO -XX:NewRatio=3 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=4 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+CMSParallelRemarkEnabled -XX:MaxGCPauseMillis=50 -XX:+UseAdaptiveGCBoundary -XX:-UseGCOverheadLimit -XX:SurvivorRatio=8 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=15 -XX:+DisableExplicitGC -Xnoclassgc -oss4M -ss4M -XX:CMSInitiatingOccupancyFraction=60 -XX:SoftRefLRUPolicyMSPerMB=2048 -Xms512M -Xmx2048M -jar forge-1.16.5-36.2.30.jar nogui</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows上循环脚本的写法(假如是在windows上开服的话)</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:loop</span><br><span class="line"></span><br><span class="line">call 服务器启动.cmd</span><br><span class="line"></span><br><span class="line">goto loop</span><br><span class="line">pause</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="防ssh中断后终端被杀"><a href="#防ssh中断后终端被杀" class="headerlink" title="防ssh中断后终端被杀"></a>防ssh中断后终端被杀</h2><ul>
<li>先用screen开启一个分屏<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -S mcf</span><br></pre></td></tr></table></figure></li>
<li>然后在该分屏启动服务器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar -Xms512M -Xmx2048M server.jar nogui</span><br></pre></td></tr></table></figure>
运行后可以直接在后台指令区和服务器进行交互。也可以给自己管理员权限方便在游戏中直接控制。<br>如果想返回ubuntu自己的指令行，就按ctrl+A+D回去。<br>想要重新进入这个screen进程回到mc运行的那个指令行，就打开ssh输入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -r mcf</span><br></pre></td></tr></table></figure>
如果想要删除这个screen会话，就输入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -S mcf -X quit</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>在ubuntu终端（mc的服务器端）不需要斜杠。在客户端需要。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/stop 停止游戏</span><br><span class="line">/op binary 设为管理员</span><br></pre></td></tr></table></figure>
<h4 id="服务器后台遇到的一个问题"><a href="#服务器后台遇到的一个问题" class="headerlink" title="服务器后台遇到的一个问题"></a>服务器后台遇到的一个问题</h4><blockquote>
<p>ServerHangWatchdog detected that a single server tick took 60.00 seconds (should be max 0.05)，导致服务器停止运行了</p>
</blockquote>
<p>这是我落后的腾讯云跟不上mc服务器先进的看门狗计时自我要求了！<br>修改server.properties文件内的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max-tick-time=60</span><br></pre></td></tr></table></figure>
<p>60改成-1，-1表示：哪怕延迟再多，看门狗都不会切断服务器了。</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>server.properties文件修改</p>
<p>entity-broadcast-range-percentage  实体游戏渲染距离（10~1000）<br>设置小一点</p>
<p>Description: Exception in server tick loop  tick的最大加载毫秒数（超过这个时间将判定服务器崩溃）<br>设为-1。假如你设为某个不是-1的值，比方说256，那么服务器跟不上玩家的时间超出256跳之后就会崩溃。</p>
<p>max-world-size  世界大小<br>改小，反正跑不了那么多图</p>
<p>network-compression-threshold 数据包多大时开始压缩传输<br>这个值设置得小会让CPU负担大一点，设置得大会让网卡（跟服务器带宽有关）负担大一点。<br>所以这个值，看你的机器性能瓶颈在哪。查看你的CPU和带宽的使用情况，通过调节这个值让两边的负载尽量均衡，而不要让某一个累死另外一个轻松死。</p>
<p>view-distance视距<br>调小一点</p>
]]></content>
      <tags>
        <tag>mc</tag>
      </tags>
  </entry>
  <entry>
    <title>mc插件服插件体验</title>
    <url>/2023/01/20/mc%E6%8F%92%E4%BB%B6%E6%9C%8D%E6%8F%92%E4%BB%B6%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>mc的服务器可以分为原版、模组服、插件服、混合服。</p>
<p>前三者都相对稳定，但是没法同时兼容模组和插件两种好玩的添加。模组服，例如forge和fabric两大派，是比较常见的，且前者比后者早出现。有很多很多往mc里添加了新内容的模组，开一个模组服意味着可玩的内容一下子无穷无尽了。但是服务器端用的模组必须复制一份到客户端，这是它的缺点。</p>
<p>插件服是完全针对服务器的概念，客户端无需添加插件。所以插件原版服务器逻辑的渗透更深，让客户端什么都不需要添加就能享受新玩法。深度改写原版服务器逻辑并不容易，所以一方面很多插件都只是对原版做了些功能性的完善，例如白名单插件、登陆插件。另一方面，也有些插件增添了实质性的新内容。插件的另外一个好处是，最新版本的插件往往向下兼容旧版本的服务器，这意味着不需要像找模组那样寻找旧版的模组。</p>
<p>混合服，例如mohist和catserver等，兼容了模组和插件，但是没法完全兼容两者，导致版本匹配的插件、模组没法使用在混合服中。</p>
<p>近日尝试了一些有趣的插件，特作记录。</p>
<h2 id="权限管理插件"><a href="#权限管理插件" class="headerlink" title="权限管理插件"></a>权限管理插件</h2><p>权限管理有很多插件可用。低版本的可以选essentials+groupmanager，高版本的例如1.16.5可以使用essentialx+luckporms。</p>
<p>折腾一圈之后，终于在1.16.5上用起了essentialx+luckporms组合。luckporms有个前置插件叫vaults需要安装。</p>
<p>原版通过玩家是否是管理员来粗略地控制权限。但是op拥有所有权利，非op却连传送都不行，这是让人玩不舒服的。加装了权限管理之后，可以把所有指令的使用权交给luckporms来管辖，腐竹拥有使用luckporms来管辖其他玩家能使用什么指令的权力。所有人都设为非op。</p>
]]></content>
      <tags>
        <tag>mc</tag>
      </tags>
  </entry>
  <entry>
    <title>mc魔改主菜单的ui和进度加载界面</title>
    <url>/2023/01/20/mc%E9%AD%94%E6%94%B9%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%9A%84ui%E5%92%8C%E8%BF%9B%E5%BA%A6%E5%8A%A0%E8%BD%BD%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="魔改主菜单的ui"><a href="#魔改主菜单的ui" class="headerlink" title="魔改主菜单的ui"></a>魔改主菜单的ui</h1><p>使用mod实现ui界面自定义:<br>fancymenu_forge_2.11.0_MC_1.12-1.12.2<br>两个前置也要装<br>konkrete_forge_1.3.3_MC_1.12-1.12.2<br>_MixinBootstrap-1.1.0</p>
<p>支持大背景、按钮背景、按钮位置的自定义。</p>
<ol>
<li>模组字体修改</li>
</ol>
<p>可能字体太小看不清：<br>修改.minecraft\versions\『渡·海·棠』\config\fancymenu\config.txt的最后一行，将其调整为3.0</p>
<ol start="2">
<li><p>大背景修改<br>在.minecraft\versions\『渡·海·棠』\下建个放素材的文件夹，放好各自图片素材。对于前景图标按钮之类的素材，可以利用背景透明的那种图片素材，效果更好。设计一种布局时，<em>当前菜单-布局-新建布局</em>，然后会进入可设计界面。可以先 <em>布局-配置-set background</em>设一个美美的高清大背景。</p>
</li>
<li><p>按钮修改</p>
</li>
</ol>
<p>然后把不用的按钮或界面元素删掉：<em>右击那个按钮、界面元素-删除</em>。</p>
<p>然后调整按钮位置、大小：<em>右击按钮-设置方位</em>，根据按钮群在界面的大概方位选一个，方可挪动它们并进行位置、大小微调。</p>
<p>最后设置按钮背景图和鼠标碰到按钮时的背景图：<em>右击按钮-set background</em>，选择按钮背景图。</p>
<p>按钮上的也可以自定义，注意可以通过在文字前加 &amp;1 的方式将其格式化为特点色彩。</p>
<ol start="4">
<li>窗口上的图标和文字</li>
</ol>
<p>准备两个小图分别命名为icon16x16.png和icon32x32.png，尺寸同图名。放入.minecraft&#x2F;config&#x2F;fancymenu&#x2F;minecraftwindow&#x2F;icons，然后在模组工具栏点击左上角的设置，在minecraft 窗口那里设置窗口上文字，并允许自定义图标。</p>
<ol start="5">
<li>一个没啥用的动画</li>
</ol>
<p>这个动画制作起来还是需要点时间的，但是没啥用。因为它会在游戏加载进度界面之后，在主菜单出现之前播放。</p>
<ul>
<li>选好视频</li>
<li>分解为帧</li>
<li>利用独立软件fm_animation_maker_1.2.0将帧文件夹做成素材</li>
<li>加装loadmyresources_1.0.1_MC_1.12-1.12.2模组，并把做好的素材COPY_CONTENT_TO_MINECRAFT_FOLDER文件夹下的两文件拷贝到客户端对应位置，分别合并</li>
<li>在 <em>FancyMeun 设置-游戏加载-游戏开场动画</em>那里输入制作素材时给素材的命名，使素材能被找到。建议把“预加载动画”选项disable掉，这样可以免除长时间预加载。</li>
</ul>
<p>假如想在游戏开始前播放一段介绍游戏的煽情动画，这个功能可以考虑考虑。</p>
<h1 id="魔改游戏加载界面"><a href="#魔改游戏加载界面" class="headerlink" title="魔改游戏加载界面"></a>魔改游戏加载界面</h1><p>首先，是有很多mod可以diy的。但是很凑巧大部分不支持1.12，即使支持也会和之前的FancyMeun排斥。<br>这里采用手动修改配置文件的方式。</p>
<ol>
<li><p>对于1.12，.minecraft\versions\『渡·海·棠』\config下的splash.properties是控制这个加载界面的。首先可以利用它把加载时的内存状态隐藏掉，背景、进度条等的颜色改一改。</p>
</li>
<li><p>有下角的砧板动画<br>这个砧板是forge的标志，根据splash.properties的倒数第二行指示： forgeTexture&#x3D;fml:textures&#x2F;gui&#x2F;forge.png<br>这个动画的位置在.minecraft\libraries\net\minecraftforge\forge\forge-1.12.2-14.23.5.2860.jar\assets\fml\textures\gui\forge.png<br>有意思的是这个小动画其实是个png，但是宽度为128，长度是128的很多倍。那我们可以ps一个类似的png图，模仿出一个小动画效果。</p>
</li>
<li><p>主体mojang大图标<br>它位于.minecraft\versions\『渡·海·棠』.jar\assets\minecraft\textures\gui\title\mojang.png<br>大小不能变，否则报错。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>mc</tag>
      </tags>
  </entry>
  <entry>
    <title>python语法</title>
    <url>/2023/01/21/python%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;jxl&#x27;</span></span><br><span class="line"><span class="built_in">len</span>(a) <span class="comment">#字符串长度</span></span><br><span class="line">a == <span class="string">&#x27;jxl&#x27;</span> <span class="keyword">and</span> a~= <span class="string">&#x27;jx&#x27;</span> <span class="comment">#并列条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个字符串str1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&quot;3w.gorly.test.com.cn&quot;</span></span><br><span class="line"><span class="comment">#指定分隔符为&#x27;.&#x27;，并且指定切割次数为1次</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> str1.split(<span class="string">&#x27;.&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">[<span class="string">&#x27;3w&#x27;</span>, <span class="string">&#x27;gorly.test.com.cn&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个坑:python里的=是引用</span></span><br><span class="line"><span class="comment">#若想要传值必须写</span></span><br><span class="line">a = copy.deepcopy(b)</span><br></pre></td></tr></table></figure>


<ul>
<li>通过setup.py来安装python模块，记录产生了哪些文件夹以便卸载</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 记录安装日志</span><br><span class="line"># 安装jieba</span><br><span class="line">python setup.py install --record logName</span><br><span class="line">## 卸载的时候使用日志文件logName</span><br><span class="line">cat logName | xargs rm -rf</span><br></pre></td></tr></table></figure>



<ul>
<li>python调用matlab打包好的模块</li>
</ul>
<ol>
<li>安装matlab运行库，并把路径写入$PATH这样才不会报找不到运行库的错</li>
<li>将matlab代码编译出来后，用对应python在编译出的文件夹for_redistribution_files_only下运行<code>python setup.py install --record logName</code>。即可到python中调用该模块。</li>
</ol>
<hr>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu重装</title>
    <url>/2023/01/21/ubuntu%E9%87%8D%E8%A3%85/</url>
    <content><![CDATA[<h2 id="系统重装"><a href="#系统重装" class="headerlink" title="系统重装"></a>系统重装</h2><p>不需要到windows上格式化原ubuntu使用的各个磁盘分区。只需要插入启动u盘，连上网，在线安装，选择覆盖检测到的原ubuntu即可。仍可以对原ubuntu的各个分区占用进行重新划分，并可以选择是否格式化某些分区。</p>
<p>可以选择中文的系统环境，英文（美国）的键盘。</p>
<p>安装完成后软件源已经是中国的了。可以进一步换成某高校或企业的源。</p>
<p>然后执行<code>sudo apt-get update</code> <code>sudo apt-get upgrade</code> 全面升级软件到最新，升级后查看桌面、声卡驱动、蓝牙驱动等是否正常工作。假如正常，就<code>sudo apt-mark hold linux-image-xxxxxx</code>把当前已经安装的内核版本都固定住，防止日后upgrade的时候将内核一同升级导致的驱动实效等问题。</p>
<h2 id="双系统共享D盘的挂载"><a href="#双系统共享D盘的挂载" class="headerlink" title="双系统共享D盘的挂载"></a>双系统共享D盘的挂载</h2><p>D盘自动挂载在&#x2F;media&#x2F;jxl&#x2F;D，在文件夹的“其他”里能够看到其实际物理分区为&#x2F;dev&#x2F;nvme0n1p7，但是却无法修改其所属人和权限。</p>
<p>挂载位置可以随便选，比如<br>&#x2F;D<br>&#x2F;media&#x2F;jxl&#x2F;D<br>&#x2F;home&#x2F;jxl&#x2F;D</p>
<p>我选择第二种。同时又要让D盘属于jxl，但是其他用户（比如root）也可以增加、修改、执行文件。</p>
<p>所以要在专管开机挂载磁盘的文件最后一行加入挂载指令：<br><code>jxl@jxl-Inspiron-5580:~$ sudo vi /etc/fstab</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 挂载D盘并将其设为可执行</span><br><span class="line">UUID=DE86-CC06  /media/jxl/D vfat iocharset=utf8,gid=1000,uid=1000,umask=000 0 2</span><br></pre></td></tr></table></figure>

<p>其中UUID和D盘文件系统类型vfat获取自</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jxl@jxl-Inspiron-5580:~$ sudo blkid /dev/nvme0n1p7</span><br><span class="line">/dev/nvme0n1p7: LABEL=&quot;D&quot; UUID=&quot;DE86-CC06&quot; TYPE=&quot;vfat&quot; PARTLABEL=&quot;Basic data partition&quot; PARTUUID=&quot;ec655e13-9b7b-46c1-bd9f-78911f667a6f&quot;</span><br></pre></td></tr></table></figure>

<p>属于1000用户组和1000用户jxl：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jxl@jxl-Inspiron-5580:~$ cat /etc/passwd |grep jxl</span><br><span class="line">jxl:x:1000:1000:jxl,,,:/home/jxl:/bin/bash</span><br></pre></td></tr></table></figure>

<p>iocharset&#x3D;utf8使得中文不乱码，umask&#x3D;000相当于在挂载时<code>chmod 777</code></p>
<p>最后两个数字，第一个​​0​​​是代表是否开机检查磁盘，​​0​​​是否，​​1​​是是</p>
<p>第二个数字是分区的种类：</p>
<p>​​0​​交换分区</p>
<p>​​1​​启动分区</p>
<p>​​2​​普通分区（选2，普通分区）</p>
<p><code>reboot</code>之后生效。</p>
<h2 id="安装vscode"><a href="#安装vscode" class="headerlink" title="安装vscode"></a>安装vscode</h2><p>注意的是软件商店里的不能键入中文。从官网下很简单才行。</p>
<h2 id="浏览器看视频缺少插件"><a href="#浏览器看视频缺少插件" class="headerlink" title="浏览器看视频缺少插件"></a>浏览器看视频缺少插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu命令</title>
    <url>/2023/01/20/ubuntu%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:w 保存不退出 </span><br><span class="line">:w 新文件名 把文件另存为新文件 </span><br><span class="line">:q 不保存退出 </span><br><span class="line">:wq 保存退出  </span><br><span class="line">:! 强制 </span><br><span class="line">:q! 强制不保存退出，用于修改文件之后，不保存数据退出 </span><br><span class="line">:wq! 强制保存退出，当文件的所有者或 root 用户，对文件没有写权限的时候，强制写入数据使用</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>和win中的系统变量一样，在乌班图中能直接输入一个指令开启某个软件，是因为该软件的启动脚本在&#x2F;bin文件夹下，而bin文件夹是系统去检索软件的位置之一。</p>
<p>所有的位置存储在系统变量path里，所以如果自己有个文件全是希望直接运行的脚本，可以用export指令将其导入到变量Path中。<br>再远一布，还可以将上述export命令了添加在专门记录的文集.bashrc里。然后用source .bashrc来执行这些export命令。</p>
<hr>
<h3 id="基础的linux云服务器维护命令"><a href="#基础的linux云服务器维护命令" class="headerlink" title="基础的linux云服务器维护命令"></a>基础的linux云服务器维护命令</h3><p>基本的Linux命令对于训练模型非常有必要。<br>从这个网页上能学到很多基础操作，特别是针对云服务器的维护和使用：<a href="https://www.autodl.com/docs/linux/">Linux基础</a></p>
<ul>
<li>训练结束后关机</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 假设您的程序原执行命令为</span><br><span class="line">python train.py</span><br><span class="line"></span><br><span class="line"># 那么可以在您的程序后跟上shutdown命令</span><br><span class="line">python train.py; shutdown      # 用;拼接意味着前边的指令不管执行成功与否，都会执行shutdown命令</span><br><span class="line">python train.py &amp;&amp; shutdown    # 用&amp;&amp;拼接表示前边的命令执行成功后才会执行shutdown。请根据自己的需要选择</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="ubuntu防暴力ssh登陆："><a href="#ubuntu防暴力ssh登陆：" class="headerlink" title="ubuntu防暴力ssh登陆："></a>ubuntu防暴力ssh登陆：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看ssh登陆失败记录：</span><br><span class="line">cat /var/log/auth.log | grep Failed</span><br><span class="line"></span><br><span class="line">1、先把始终允许的IP填入 /etc/hosts.allow ，这很重要！比如：</span><br><span class="line">sshd:19.16.18.1:allow</span><br><span class="line">sshd:19.16.18.2:allow</span><br><span class="line"></span><br><span class="line">2、编写脚本 /usr/local/bin/secure_ssh.sh</span><br><span class="line">#! /bin/bash</span><br><span class="line">cat /var/log/auth.log|awk &#x27;/Failed/&#123;print $(NF-3)&#125;&#x27;|sort|uniq -c|awk &#x27;&#123;print $2&quot;=&quot;$1;&#125;&#x27; &gt; /usr/local/bin/black.list</span><br><span class="line">for i in `cat  /usr/local/bin/black.list`</span><br><span class="line">do</span><br><span class="line">  IP=`echo $i |awk -F= &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">  NUM=`echo $i|awk -F= &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">  if [ $&#123;#NUM&#125; -gt 1 ]; then</span><br><span class="line">    grep $IP /etc/hosts.deny &gt; /dev/null</span><br><span class="line">    if [ $? -gt 0 ];then</span><br><span class="line">      echo &quot;sshd:$IP:deny&quot; &gt;&gt; /etc/hosts.deny</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">3、将secure_ssh.sh脚本放入cron计划任务，每1分钟执行一次。</span><br><span class="line"># crontab -e</span><br><span class="line">在出现的vi中写入并保持：</span><br><span class="line">*/1 * * * *  sh /usr/local/bin/secure_ssh.sh</span><br><span class="line"></span><br><span class="line">查看被拒绝访问的ip：</span><br><span class="line">[root@ ~]# cat /etc/hosts.deny</span><br><span class="line">sshd:13.7.3.6:deny</span><br><span class="line">sshd:92.4.0.4:deny</span><br><span class="line">sshd:94.10.4.2:deny</span><br><span class="line">sshd:94.4.1.6:deny</span><br><span class="line">sshd:11.64.11.5:deny</span><br><span class="line">sshd:13.26.21.27:deny</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="w-查看有哪些终端"><a href="#w-查看有哪些终端" class="headerlink" title="w 查看有哪些终端"></a>w 查看有哪些终端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-16-2-ubuntu:~$ w</span><br><span class="line"> 14:14:19 up 104 days,  1:05,  4 <span class="built_in">users</span>,  load average: 0.18, 0.18, 0.18</span><br><span class="line">USER     TTY      来自           LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">ubuntu   pts/0    112.20.243.38    12:48    1:14m  0.05s  0.05s -bash</span><br><span class="line">ubuntu   pts/2    112.20.243.38    12:49    1:15m  0.03s  0.03s -bash</span><br><span class="line">ubuntu   pts/3    112.20.243.38    13:51    0.00s  0.03s  0.00s w</span><br><span class="line">ubuntu   pts/4    112.20.243.38    14:01   12:38   0.03s  0.03s -bash</span><br></pre></td></tr></table></figure>
<p>who am i</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-16-2-ubuntu:~$ <span class="built_in">who</span> am i</span><br><span class="line">ubuntu   pts/3        2022-06-29 13:51 (112.20.243.38)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>write向别的终端写入消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-16-2-ubuntu:~$ write ubuntu pts/4</span><br><span class="line">hello</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>wall 向所有终端广播<br>tall 向别的用户发消息</p>
<p>shell中将命令结果赋值给变量<br>两种方法，推荐使用后者，支持嵌套，下面两个参考链接写得很清楚了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var=`command`</span><br><span class="line"></span><br><span class="line">var=$(command)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>ubuntu对英伟达显卡的支持不好，不仅会导致装系统时开机开不了，还会导致ubuntu风扇空转，机器过热甚至关机。所以建议，自己的电脑上ubuntu时不要使用英伟达独显，使用Intel集显就好，风扇不会空转。</p>
<p>真要训练模型，用实验室的或者租用训练平台的。</p>
<h3 id="下载东西"><a href="#下载东西" class="headerlink" title="下载东西"></a>下载东西</h3><p>自带中断重连、后台下载，可查看下载状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -t 0 -c -b http://rachmaninoff.gel.ulaval.ca/static/./tmp.InNWaX2Owi/390be30afc9052f92d50e52b25bbe16371ea2836.tar.gz</span><br><span class="line"></span><br><span class="line">tail -f wget-log #查看log</span><br><span class="line">ps aux | grep wget  #查看后台下载还在不在</span><br><span class="line">需要用户名和密码:加上 --http-user xxx --http-passwd xxx </span><br><span class="line">从文件中读取链接来下载:加上 -i </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>基于frp的家庭网电脑建站方案</title>
    <url>/2023/01/22/%E5%9F%BA%E4%BA%8Efrp%E7%9A%84%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%94%B5%E8%84%91%E5%BB%BA%E7%AB%99%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>我有一台2015年（初三）左右购入的惠普笔记本，当时买来用于练习英语听力。到了2020年左右，我正在上大二，且仍然使用这台惠普。<br>笔记本、手机等更新换代是常有的事，然而我的惠普上的windows7旗舰版能够胜任我一个计算机专业学生的所有需求，只不过硬件有些撑不住了–外壳破裂，开启无线网的按钮失灵。</p>
<p>2020年寒假，我照常把笔记本丢在了学校，结果因为疫情没法回去，所以顺势买了台新的戴尔笔记本。老惠普从此退役，没在打开过。</p>
<p>今年暑假，我觉得老惠普就这样扔掉太可惜，于是想将它变成服务器。这里记录了这个过程。</p>
<h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><ol>
<li>网络和电源</li>
</ol>
<p>我用一根网线直接连接路由器和老惠普，使其不仅有网还比无线网络稳定。电源也一直连接着。电脑屏幕会息屏，但是息屏是桌面的事，不会干扰ssh登陆。</p>
<ol start="2">
<li>重装系统</li>
</ol>
<p>改造之前，惠普上是windows11+ubuntu16.04+ubuntu16.04的三系统共存。windows11到底是比较吃硬件的，在老惠普上运行很慢。两个ubuntu非常好用，只可惜空间有点小。虽然能直接访问windows下的D、E、F各个盘，还是觉得windows11的存在很累赘。于是我把系统重装为<strong>ubuntu22.04单系统</strong>。重装完之后老惠普的键盘出现了大小写错乱和没按shift却一直输出特殊字符的问题。此时想重装为之前没这种Bug的ubuntu16.04已经晚了。这是因为重装为ubuntu22.04之后只有uefi一种引导方式了，而ubuntu16.04的镜像文件里恰恰没有照应uefi的引导文件，导致开机检测不到u盘里的ubuntu16.04镜像文件。</p>
<p>可能还有其他方法可以把系统装回低版本ubuntu，但已经不想折腾了。况且作为服务器，老惠普的键盘、桌面统统不重要。因为远程ssh登陆老惠普之后的输入都跟老惠普自身的键盘、桌面无关。ubuntu比windows轻捷很多，同样的老机器，ubuntu运行起来非常顺滑。</p>
<ol start="3">
<li>启用ssh</li>
</ol>
<p>新装的ubuntu上ssh是没开的。装下openssh-server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"># 看看ssh服务器是不是开了</span><br><span class="line">sudo systemctl status ssh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新装的系统上带了防火墙。看看防火墙的状态，确保ssh使用的22端口是放行的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p>此时，因为我的戴尔和惠普处在同一个家庭网中，用我的戴尔是能够ssh登陆老惠普的。老惠普的键盘错乱到我不想用的地步，ssh一开我立马从戴尔上登入惠普。</p>
<ol start="4">
<li>frp内网穿透</li>
</ol>
<p>老惠普老当益壮，4G内存，4核CPU，400G+的磁盘，已经完胜XX云上普通配置的机器了。<br>他唯一的弱点是没有一个公网ip，让我离家千里之后能在互联网上寻找到他。<br>好在我有kexueshangwang的刚需，手里常年会有一台vultr的最低配置的vps。但是vps要花钱，我穷我舍不得买高配的用，低配的带些服务器比较吃力（我觉得会比较吃力）。此外，最不放心的是vps在物理上经常永远不属于我，我不想把重要的东西放在上边。</p>
<p>我需要把vps的公网ip和老惠普的硬件资源做一个整合。把vps当作门户，把我的域名jixinlong.top解析到vps的ip上。即使以后更换vps也可以很快的调整dns解析条目。利用frp做一个内网穿透，建立从vps到老惠普的ssh，http，https，静态文件服务 映射。</p>
<ul>
<li>vps 7000端口 –绑定– 惠普7000端口</li>
<li>vps 80端口 –http映射– 惠普80端口</li>
<li>vps 443端口 –https映射– 惠普443端口</li>
<li>vps 非22端口 –ssh映射– 惠普22端口</li>
<li>vps 8080端口 –静态文件服务映射– 惠普某端口</li>
</ul>
<p>还需要一个8888端口给后续的宝塔面板使用。</p>
<ul>
<li>vps 8888端口 –tcp映射– 惠普8888端口</li>
</ul>
<p>vps上的frps.ini：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@01:~/frp_0.43.0_linux_amd64# cat frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 80</span><br><span class="line">vhost_https_port = 443</span><br></pre></td></tr></table></figure>

<p>惠普上的frpc.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jxl@jxl-HP-g14-Notebook-PC:~/frp_0.43.0_linux_amd64$ cat frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = dns.jixinlong.top</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[hp-ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = xxxx</span><br><span class="line"></span><br><span class="line">[hp-static-files]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 8080</span><br><span class="line">plugin = static_file</span><br><span class="line"># 要对外暴露的文件目录</span><br><span class="line">plugin_local_path = xxxx</span><br><span class="line"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span><br><span class="line">plugin_strip_prefix = static</span><br><span class="line">plugin_http_user = xxxx</span><br><span class="line">plugin_http_passwd = xxxx</span><br><span class="line"></span><br><span class="line">[hp-https-www]</span><br><span class="line">type = https</span><br><span class="line">custom_domains = www.jixinlong.top</span><br><span class="line">local_port = 443</span><br><span class="line"></span><br><span class="line">[hp-https]</span><br><span class="line">type = https</span><br><span class="line">custom_domains = jixinlong.top</span><br><span class="line">local_port = 443</span><br><span class="line"></span><br><span class="line">[hp-jxl-http]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = jixinlong.top</span><br><span class="line"></span><br><span class="line">[hp-jxl-http-www]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = www.jixinlong.top</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#宝塔面板</span><br><span class="line">[hp-jxl-baota]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 8888</span><br><span class="line">remote_port = 8888</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">#custom_domains = baota.jixinlong.top</span><br></pre></td></tr></table></figure>
<p>注意这里的宝塔8888端口映射使用普通的tcp映射就好，采用http反而连不上报错。这个和宝塔面板本身有关。</p>
<p>两边分别运行frps和frpc，此时就可以利用ssh直接域名dns.jixinlong.top及对应非22端口来远程登陆老惠普了。vps那边可以用screen把frps切到一边去常态化监听。</p>
<ol start="5">
<li>惠普的frpc开机自启</li>
</ol>
<p>vps一般是不会无故重启啥的，比较稳定。但是惠普就不一定了，家里停电、断网啥的都可以导致它关机。一旦关机我就没法在外地远程登陆惠普了。所以这里需要让惠普这边的frpc开机自动启动。<br>此处参考了网上的一些写法，配置systemctl进行开机启动<br>创建frpc.service服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure>
<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">#服务描述</span><br><span class="line">Description=frpc service </span><br><span class="line">After=network.target network-online.target syslog.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">#执行命令 </span><br><span class="line">ExecStart=/home/jxl/frp_0.43.0_linux_amd64/frpc -c /home/jxl/frp_0.43.0_linux_amd64/frpc.ini</span><br><span class="line">#定期重启，一天一次，一方内网穿透疲惫</span><br><span class="line">Restart=always</span><br><span class="line">RuntimeMaxSec=604800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 网上教程的After和Wants是这样写的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br></pre></td></tr></table></figure>
<p>区别在于没有-online。不加online的network.target意味着希望在网络服务启动之后再启动frpc服务，<strong>但网络服务启动不保证能连上网络</strong>。我实际实验时也发现这种写法的自启动，网络并没有连接上，导致frpc启动失败。改成我这种写法之后，就能使网络连接成功之后再启动frpc。</p>
<p>继续，终端里输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload  </span><br></pre></td></tr></table></figure>

<p>之后便可以直接使用systemctl命令来控制frpc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">sudo systemctl start frpc </span><br><span class="line">#关闭</span><br><span class="line">sudo systemctl stop frpc</span><br><span class="line">#重启</span><br><span class="line">sudo systemctl restart frpc</span><br><span class="line">#查看状态</span><br><span class="line">sudo systemctl status frpc</span><br><span class="line"></span><br><span class="line">设置开机自动启动</span><br><span class="line"></span><br><span class="line">sudo systemctl enable frpc</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>安装宝塔面板，并利用宝塔安装wordpress</li>
</ol>
<p>宝塔是一个帮人快速搭建建网站的环境，并帮人建网站的面板。wordpress单纯是一个帮助人快速建网站的框架。wordpress需要数据库、php、Apache 服务等作为环境，<a href="https://zhuanlan.zhihu.com/p/270230445">这些可以在ubuntu上自己挨个装</a>（方法1）;<a href="https://www.jianshu.com/p/293c94adc11d">也可以先搞个宝塔，利用宝塔一键装这些环境</a>（方法2）。</p>
<p>网上有的教程是用宝塔装好环境之后，直接在宝塔的应用商店里搜到wordpress一键装wordpress的。但我没搜到。所以我是基于方法2，从wordpress中文官网下载压缩包，丢到宝塔网站目录里装的wordpress。</p>
<p>总之把wordpress安装好之后，网站就初步建立了。</p>
<ol start="7">
<li>wordpress使用</li>
</ol>
<p>网上说wordpress写得很不好，资源利用率不高啥的。我不明觉厉。wordpress也有优点，就是快捷建站，有良好的生态（使用者多，那么围过来的开发者就多），插件、网站主题很多。跟同样快捷的Hexo+github静态建站方案比起来，它的优点是动态的，天然地带评论区等功能。</p>
<p>图片、视频、音乐都可以上传到wordpress的媒体库。主题可以随时换，不同主题不一样，有没有用到背景图、头像等因主题而已，但是针对某个主题的设定会有记忆，下次切回来的时候不用重新挨个设置该主题的内容元素。</p>
<p>插件这边，我装了WP Githuber MD，可以直接把本地写好的markdown复制进去，自动渲染后发表成文章。wordpress默认使用的头像服务被ban了，访问时会出现头像加载不出来的丑态。我直接One User Avatar插件把所有人的头像设成存在网站本地的小鸟游同学大头照。</p>
<ol start="8">
<li><span id="jump">wordpress更换网址（可选）</span></li>
</ol>
<p>首先要修改设置里的WordPress地址（URL）和站点地址（URL）为新地址。此时frp穿透无误的情况下，是可以通过新网址访问网站前后台的。</p>
<p>接着，网站中存有很多之前写文章时导入的图片，其链接还是旧的，这些图片就会加载不出来。改下数据库里的这些链接。进入phpmyadmin数据库管理，找到 wp_posts 这个数据表，切换到SQL状态，在输入栏中输入如下代码执行即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE wp_posts SET post_content = replace( post_content, &#x27;老域名&#x27;,&#x27;新域名&#x27;) ;</span><br></pre></td></tr></table></figure>
<p>改完大部分图片加载正常了。去网站上翻翻看，还有音频啥的没改过来，就重新编辑所在文章，删了重新添加，音频的链接就会变成新的。</p>
<ol start="9">
<li>http更换为https</li>
</ol>
<p>这一步其实很简单。<br>宝塔面板里 该网站-设置-SSL-申请个证书并部署它-打开“强制https”<br>http变成https也算是网址的更换了，所以要做一次<a href="#jump">wordpress更换网址</a><br>更换之后再访问网站，浏览器就不会提示不安全连接啥的了。</p>
<ol start="10">
<li>假如改wordpress网址玩脱了</li>
</ol>
<p>导致登不进去了。有两种办法。</p>
<ul>
<li>宝塔进入使用主题的function.php，在任意空白处加上下面两行代码：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update_option(&#x27;siteurl&#x27;,&#x27;改之前的网址&#x27;);    </span><br><span class="line"></span><br><span class="line">update_option(&#x27;home&#x27;,&#x27;改之前的网址&#x27;);</span><br></pre></td></tr></table></figure>

<p>保存，再次登录即可。记得再把这两行注释掉。</p>
<ul>
<li>直接改数据库，把记录里的网址改回去。<br>宝塔登陆phpMyAdmin，选中你的WordPress数据库；<br>找到wp-options这个数据表；<br>打开这个表，找到第一条记录，也就是option_name为siteurl的那条记录，将option_value中错误的地址改为正确的即可。（如果option_name为home的那条记录地址也是错误的，改为正确的即可）</li>
</ul>
<h1 id="优缺点总结"><a href="#优缺点总结" class="headerlink" title="优缺点总结"></a>优缺点总结</h1><p>本方案利用vultr的vps做网站门户，实际网站资源部署在家庭网内的老惠普上。这样的好处是：</p>
<ul>
<li>将域名解析到一个oversea的vps上，且名义上我oversea的vps就是网站所在地，这样不需要繁琐的域名、网站put on records 工作。</li>
<li>vps的更换可以是高度灵活的。假如我换了vps，只需要把域名解析到新的ip，然后在新的vps上继续运行frps即可。重启老惠普上的frpc，老惠普会自动依据我的域名寻址到新的vps，并请求和新的vps建立映射。真正网站实体在老惠普上，铁打的惠普，流水的vps。</li>
</ul>
<p>这样的坏处也显而易见：</p>
<ul>
<li>本来可以直连的网站中间多了个vps，路径变远了。更何况这个vps还是oversea的，远上加远。这降低了网站速度。</li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>frp</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>创建hexo，并让hexo支持公式</title>
    <url>/2023/02/03/%E5%88%9B%E5%BB%BAhexo%EF%BC%8C%E5%B9%B6%E8%AE%A9hexo%E6%94%AF%E6%8C%81%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="创建hexo"><a href="#创建hexo" class="headerlink" title="创建hexo"></a>创建hexo</h1><p>网上相关教程很多。<br>hexo项目的主页在<a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a><br>本来没什么可说的，就是依赖比较多：需要git、github账号、nodejs、npm</p>
<p>光我自己参考过的教程就很多了，比方说：</p>
<p><a href="http://codewithzhangyi.com/2018/04/19/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%8A%EF%BC%89/#:~:text=%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%8A%EF%BC%89%201%20%E5%87%86%E5%A4%87%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%202%20%E6%B3%A8%E5%86%8Cgithub%203%20%E5%88%9B%E5%BB%BARepository%204,Key%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E5%95%A6%EF%BC%81%208%20%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2.%20...%209%20%E5%B0%86%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0username.github.io%2010%20%E5%86%99%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81">如何搭建自己的个人网站（上） | Zhang Yi</a><br><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程 - 知乎</a></p>
<p>这是两个非常细致的教程，手把手喂饭了。对于熟悉git的人，可以看下边一篇简洁版的，重点讲node和npm的安装。<br><a href="https://anjingcuc.gitee.io/courses-wiki/online-publishing/homework/">使用 Hexo 生成博客并发布</a></p>
<p>要注意的点是npm和nodejs在安装时可能会报错，我认为创建hexo基本都卡在这个上边。我遇到的两个问题:</p>
<ul>
<li>hexo、npm和node版本不匹配<br>hexo匹配的node版本：</li>
</ul>
<p><img src="/../images/hexo%E5%8C%B9%E9%85%8D%E7%9A%84node%E7%89%88%E6%9C%AC.png" alt="hexo需要的node版本"></p>
<ul>
<li>安装npm和node时没有给够权限导致安装失败</li>
</ul>
<p>以上问题百度容易解决，但是难发现是这两个问题。</p>
<h1 id="用hexo创建文章"><a href="#用hexo创建文章" class="headerlink" title="用hexo创建文章"></a>用hexo创建文章</h1><p>这个，一旦hexo部署好，就能在自带的首页上看到hexo的使用方法。<br>无外乎:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;xxxx&quot;</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br><span class="line">hexo clean</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>有些东西额外注意：</p>
<ul>
<li>主题目录和项目根目录下各有一个_comfig.yml配置文件，且后者优先级更高。</li>
<li>&#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;themes&#x2F;next&#x2F;languages 下有很多语言文件，可以找到汉语的，然后在配置里改“language:xxx”</li>
<li>&#x2F;home&#x2F;ubuntu&#x2F;blog&#x2F;scaffolds目录下都是一些模板，可以修改或增加模板。</li>
<li>头像、网站图标、摘要都可以再打磨打磨。</li>
<li>NexT文章目录点击不跳转，可参考<a href="https://www.bilibili.com/read/cv10197254/#:~:text=NexT%E4%B8%AD%E6%96%87%E7%9B%AE%E5%BD%95%E4%B8%8D%E8%B7%B3%E8%BD%AC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%201%20hexo%3A%205.3.0,2%20node%3A%2012.18.3%203%20var%C2%A0target%C2%A0%3D%C2%A0document.getElementById%28decodeURI%28link.getAttribute%28%27href%27%29%29.replace%28%27%23%27%2C%C2%A0%27%27%29%29%3B">NexT中文目录不跳转的解决方法</a></li>
</ul>
<p>更多玩法，可以参考这篇<a href="https://blog.csdn.net/weixin_39542608/article/details/111584243">next文章目录跳转_Hexo系列 | Hexo+next主题搭建炫酷的个人博客网站</a></p>
<p>但我觉得做个人网站的初心是记录好的内容和经历，网站做得太花里胡哨就没意思啦。对网站的美化要适可而止。</p>
<h1 id="让hexo支持公式"><a href="#让hexo支持公式" class="headerlink" title="让hexo支持公式"></a>让hexo支持公式</h1><p>hexo加nexT，初始没有支持公式。我查了一些资料，发现越早的资料方法越复杂。这说明hexo对公式的支持还是越来越强的。我参考<a href="https://zhuanlan.zhihu.com/p/105986034">在 Hexo 博客中写出好看的Latex 公式</a>，但是比它少安装两个插件，阴差阳错倒也成功了。</p>
<p>要做以下几步：</p>
<ol>
<li>修改 主题配置中 的 mathjax 相关设置</li>
</ol>
<p>搜寻主题配置文件里的“math”关键词，取消下方第二行的注释。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MathJax</span><br><span class="line">mathjax: //cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js</span><br><span class="line"># mathjax: </span><br></pre></td></tr></table></figure>
<p>更改下方第二行为“enable: true”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  # See: https://mhchem.github.io/MathJax-mhchem/</span><br><span class="line">  mhchem: false</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在文章头部声明“mathjax: true”</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 跟据全景贴图求球谐系数</span><br><span class="line">date: 2023-02-01 20:11:36</span><br><span class="line">tags:</span><br><span class="line">- SH</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重新编译以下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<p><em>截止2023年2月4号，配置如下的hexo用以上方法更改主题配置后公式渲染生效。</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-16-2-ubuntu:~/blog/source$  npm list</span><br><span class="line">hexo-site@0.0.0 /home/ubuntu/blog</span><br><span class="line">├── hexo-deployer-git@3.0.0</span><br><span class="line">├── hexo-generator-archive@2.0.0</span><br><span class="line">├── hexo-generator-category@2.0.0</span><br><span class="line">├── hexo-generator-index@3.0.0</span><br><span class="line">├── hexo-generator-search@2.4.3</span><br><span class="line">├── hexo-generator-searchdb@1.4.1</span><br><span class="line">├── hexo-generator-tag@2.0.0</span><br><span class="line">├── hexo-renderer-ejs@2.0.0</span><br><span class="line">├── hexo-renderer-marked@6.0.0</span><br><span class="line">├── hexo-renderer-stylus@2.1.0</span><br><span class="line">├── hexo-server@3.0.0</span><br><span class="line">├── hexo-theme-landscape@0.0.3</span><br><span class="line">├── hexo-theme-next@8.14.1</span><br><span class="line">└── hexo@6.3.0</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>根据全景贴图求球谐系数</title>
    <url>/2023/02/01/%E6%A0%B9%E6%8D%AE%E5%85%A8%E6%99%AF%E8%B4%B4%E5%9B%BE%E6%B1%82%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0/</url>
    <content><![CDATA[<p>目前认为室内参数化光照模型主要分为两大类：</p>
<ul>
<li>球面谐波</li>
<li>球面高斯</li>
</ul>
<h1 id="SH初探"><a href="#SH初探" class="headerlink" title="SH初探"></a>SH初探</h1><p>目前球面高斯类的方法已经有<a href="https://github.com/fnzhan/Illumination-Estimation">EMlight</a>开源了，球面高斯参数生成、网络训练已经打通。但是我还没有掌握球面谐波类的方法，球面谐波模型主要难点在于求取球谐基函数的系数（spherical harmonics coefficients）。</p>
<ol>
<li>从使用SH光照模型并开源的代码入手，寻找球面谐波系数求取的代码：</li>
</ol>
<ul>
<li><a href="https://github.com/cake-lab/PointAR">PointAR</a><br>代码开源，但是求球谐系数的代码直接写在了PointAR&#x2F;datasets&#x2F;pointar&#x2F;preprocess&#x2F;cuda&#x2F;preprocess.cu里，且疑似根据点云来求</li>
<li>Learning Scene Illumination by Pairwise Photos from Rear and Front Mobile Cameras<br>靠谷歌的C++库<a href="https://github.com/google/spherical-harmonics%E6%9D%A5%E6%B1%82%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0%E3%80%82%E8%BF%99%E4%B8%AA%E5%BA%93%E5%BA%94%E8%AF%A5%E6%98%AF%E9%9D%A0%E8%B0%B1%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3%E6%9C%89%E7%82%B9%E9%9A%BE%E7%9C%8B%E6%87%82%E3%80%82">https://github.com/google/spherical-harmonics来求球谐系数。这个库应该是靠谱的，但是说明文档有点难看懂。</a></li>
<li>Deep Lighting Environment Map Estimation from Spherical Panoramas<br>代码开源。SH实域系数求法 代码直接开源，可学习借鉴。使用的是LAVAL数据集。</li>
</ul>
<ol start="2">
<li>直接谷歌”python spherical harmonics coefficients”等关键词，在github上也同时寻找，找到了3个python包和一个github代码：</li>
</ol>
<ul>
<li>pyspharm</li>
<li>pyshtools</li>
<li>scipy.special.sph_harm</li>
<li><a href="https://github.com/lianera/SphericalHarmonicsLighting%EF%BC%88C++%EF%BC%89">https://github.com/lianera/SphericalHarmonicsLighting（C++）</a></li>
</ul>
<p>阅读相关文档，最终pyshtools跑通。<br>借助pyshtools包，完成了将全景HDR图映射到球谐基上，获取低频部分的球谐系数，并从球谐系数重建出全景HDR、LDR图的代码。</p>
<h2 id="系数求取和图像复原实验"><a href="#系数求取和图像复原实验" class="headerlink" title="系数求取和图像复原实验"></a>系数求取和图像复原实验</h2><p>下面展示一些全景图及其通过5阶球谐系数（共36*3个参数）重建出的图像：</p>
<ul>
<li><p>图1<br><img src="/../images/9C4A7069-others-280-1.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
<li><p>图1-重建<br><img src="/../images/9C4A7069-others-280-1_rec.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
<li><p>图2<br><img src="/../images/AG8A9396-others-240-1.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
<li><p>图2-重建<br><img src="/../images/AG8A9396-others-240-1_rec.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
<li><p>图2<br><img src="/images/AG8A9438-others-280-2.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
<li><p>图3-重建<br><img src="/images/AG8A9438-others-280-2_rec.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
<li><p>图4<br><img src="/images/AG8A9704-others-40-1.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
<li><p>图4-重建<br><img src="/images/AG8A9704-others-40-1_rec.png" alt="C:\Users\ji_xi\Desktop\9C4A7069-others-280-1"></p>
</li>
</ul>
<p>可以看出5阶球谐系数能反映全景图的低频光照信息，成分上接近环境光。但是无法表示昏暗环境下的光源强度，这是SH光照模型的弱点。<br>Garon在其文章<a href="https://ieeexplore.ieee.org/document/8954392/">Fast Spatially-Varying Indoor Lighting Estimation</a>中也用的是5阶球谐系数，他测试了3阶到8阶的SH，认为5阶SH达到了效率和效果的平衡，最适合他的工作：</p>
<blockquote>
<p>We chose order 5 after experimenting with orders ranging from 3 to 8, and empirically confirming that order 5 SH lighting gave us a practical trade-off between rendering time and visual quality (including shading and shadow softness).</p>
</blockquote>
<p>其他论文中使用到的SH也基本是2阶（9 $\times$ 3）、3阶（16 $\times$ 3）的。</p>
<h1 id="球谐基底不止一种"><a href="#球谐基底不止一种" class="headerlink" title="球谐基底不止一种"></a>球谐基底不止一种</h1><p>球谐函数是球面空间上一组相互正交的基底，将球面上的信息（例如全景光照贴图、地球大气图层）分解为球谐基的表示形式与傅里叶变换是一个意思：都是从时域（或空间域）到频域的变换。</p>
<p>基底只需要满足相互正交，所以基底不唯一。基底的不同定义方法，就是不同的normalization。</p>
<p>目前常用的球谐函数工具包都会提供很多种normalization。不同的normalization得到的球谐基底、系数是不同的，但是重建的图像都是相同的。例如，pyshtools 4.10在支持以下四种normalization:</p>
<p><img src="/../images/pyshtools_normalization.png" alt="pyshtools_normalization"></p>
<p>是否包含Condon-Shortley phase也是基底的两种不同表示方式。Condon-Shortley phase其实就是基底中的一个$(-1)^m$，如下图所示：<br><img src="/../images/Condon%E2%80%93Shortley_phase.png" alt="Condon–Shortley_phase"></p>
<p>这是截取自另一个SH工具包SHTns 2.6.5<a href="https://www2.atmos.umd.edu/~dkleist/docs/shtns/doc/html/spec.html">说明文档</a>的图。图里清晰列出了不同normalization下球谐基底$Y^m_l(\theta,\phi)$表示公式的区别，主要是$P^m_l(cos\theta)$前不同的系数。而Condon-Shortley phase是$P^m_l(cos\theta)$中的一项，可以选择加或不加。</p>
<p>pyshtools默认构建出’4pi’-normalized、不加Condon-Shortley phase的球谐基底，并按照此球谐基底求系数。这可能是因为pyshtools原本是为地理、大气、宇航等地球学科提供的工具包。</p>
<h1 id="论文中使用的SH定义"><a href="#论文中使用的SH定义" class="headerlink" title="论文中使用的SH定义"></a>论文中使用的SH定义</h1><p>但是，据我观察，球谐光照经典论文[^1]的一个<a href="https://github.com/chalmersgit/SphericalHarmonics">python复现版本</a>里使用的球谐基底应当是’ortho’-normalized，且添加了Condon-Shortley phase。理论上，观察这份代码里对$Y^m_l(\theta,\phi)$的定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def K(l, m):</span><br><span class="line">    #return np.sqrt((2.0 * l + 1.0) * 0.07957747154594766788 * divfact(l, m))</span><br><span class="line">    return np.sqrt( ((2 * l + 1) * factorial(l-m)) / (4*np.pi*factorial(l+m)) )</span><br><span class="line">    #此处，除以4 pi，查阅https://www2.atmos.umd.edu/~dkleist/docs/shtns/doc/html/spec.html</span><br><span class="line">    #对球谐基函数几种Normalization形式的定义，得知此种是Orthonormalized形式的基函数定义。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再观察到其SH基函数关于m是正负交替的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def SH(l, m, theta, phi):</span><br><span class="line">    sqrt2 = np.sqrt(2.0)</span><br><span class="line">    #此处，SH基函数的定义正负受m奇偶影响，应当是考虑Condon-Shortley phase的</span><br><span class="line">    #https://www2.atmos.umd.edu/~dkleist/docs/shtns/doc/html/spec.html</span><br><span class="line">    if(m==0):</span><br><span class="line">        if np.isscalar(phi):</span><br><span class="line">            return K(l,m)*P(l,m,np.cos(theta))</span><br><span class="line">        else:</span><br><span class="line">            return K(l,m)*P(l,m,np.cos(theta))*np.ones(phi.shape)</span><br><span class="line">    elif(m&gt;0):</span><br><span class="line">        return sqrt2*K(l,m)*np.cos(m*phi)*P(l,m,np.cos(theta))</span><br><span class="line">    else:</span><br><span class="line">        return sqrt2*K(l,-m)*np.sin(-m*phi)*P(l,-m,np.cos(theta))</span><br></pre></td></tr></table></figure>
<p>至此，理论上可确定这份代码里的SH基函数是’ortho’-normalized，且添加了Condon-Shortley。<br>再做实验确定理论猜想。用pyshtools从一个hdr全景图中算出SH系数，设定为’ortho’-normalized，且添加Condon-Shortley。然后用这些系数重建图像。接着，用上述复现代码求SH系数，并复原图像。对比两份程序得到的系数和重建图像，基本一致。至此，可确定上述代码的SH基函数类型。</p>
<p>这份代码复现同时被另外一篇球谐光照论文使用[^2]，因此我认为其专业性没有问题。</p>
<p>[1] 11 R. Ramamoorthi and P. Hanrahan, “An efficient representation for irradiance environment maps,” in Proceedings of the 28th annual conference on Computer graphics and interactive techniques  - SIGGRAPH ’01, Not Known, 2001, pp. 497–500. doi: 10.1145&#x2F;383259.383317.<br>[2] V. Gkitsas, N. Zioulis, F. Alvarez, D. Zarpalas, and P. Daras, “Deep Lighting Environment Map Estimation from Spherical Panoramas,” May 2020, doi: 10.48550&#x2F;arXiv.2005.08000.</p>
]]></content>
      <tags>
        <tag>SH</tag>
      </tags>
  </entry>
  <entry>
    <title>周报：球谐系数的求法</title>
    <url>/2023/02/04/%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0%E7%9A%84%E6%B1%82%E6%B3%95/</url>
    <content><![CDATA[<h1 id="本周拟定工作计划"><a href="#本周拟定工作计划" class="headerlink" title="本周拟定工作计划"></a>本周拟定工作计划</h1><!-- 填写上周周报中制定的本周工作计划 -->
<ol>
<li>训练EMLight</li>
<li>有时间看下手里两个没细看的代码：garder19、styleLight</li>
</ol>
<h1 id="本周实际完成工作总结"><a href="#本周实际完成工作总结" class="headerlink" title="本周实际完成工作总结"></a>本周实际完成工作总结</h1><!-- 逐条概述本周实际开展的主要工作 -->
<ol>
<li><p>EMLight实际数据集太多，仍在训练。之前已经训练到了图片量为2000的数据集，但是由于实验室主机整体更换，数据集出现了变动，导致之前训练作废，重新训练。</p>
</li>
<li><p>garder19、styleLight还未看。</p>
</li>
<li><p>这周去看了几篇采用SH光照模型的论文，并做了SH拟合光照并复原光照的实验。</p>
</li>
</ol>
<h1 id="本周实际完成工作详述"><a href="#本周实际完成工作详述" class="headerlink" title="本周实际完成工作详述"></a>本周实际完成工作详述</h1><!-- 根据上述工作概述，逐条详细描述算法设计、实验情况等。可将实验图表及描述作为附件上传 -->

<ol>
<li>EMLight重新训练的原因</li>
</ol>
<p>Laval数据集一共有2100+张hdr全景图。在预处理阶段，每张全景图生成8个crop图，以及对应的八个warped图。所以Laval数据集可为EMLight提供19557</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(emlight) jixinlong@ubun:~/datasets/LavalIndoor/pkl$ <span class="built_in">ls</span> -l|grep <span class="string">&quot;^-&quot;</span>| <span class="built_in">wc</span> -l</span><br><span class="line">19557</span><br></pre></td></tr></table></figure>
<p>但是19557张图片太多了，一次性投喂给神经网络，让他学怎么做光照估计，就好比让什么都还不会的婴儿学高等数学。它一定会放弃，loss无法收敛。</p>
<p>所以EMLight论文中建议递进地训练，先拿100张，让模型熟练掌握在100图上的光照估计任务。然后数据集扩增到800张、2500张、10000张……每种规模上的训练一定要到“过拟合”的程度，才能进行下一阶段的训练。</p>
<p>我正是遵照这个方法在逐步训练EMLight。要注意的是，800张图片应当包含上一阶段的100张图片，2500张图也应该包含800张图，这才符合“递进式”学习的含义。在训练代码的数据集加载部分，有这样一行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gt_nms = os.listdir(gt_dir)</span><br></pre></td></tr></table></figure>
<p>它的含义是从图片目录中读取所有的图片名，形成一个文件名列表。紧接着，后边有一行代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.pairs = self.pairs[: 10000]</span><br></pre></td></tr></table></figure>
<p>含义是选取文件名列表的前10000个，用于此次训练。这两行代码就是EMLight限定数据集规模的方式。我之前好奇过，这个os.listdir()函数，它返回的文件目录每次都是固定的吗？我搜索到的答案是，返回的结果确实是固定的，而且是按照某种文件名的内在编码进行顺序排序的。我不放心，又自己多次运行这个函数，确定每次返回的结果、顺序都是一模一样的。加上EMLight这个代码是开源的，有那么多双眼睛盯着，作者也不傻，总不能这个地方还出错吧。如果我手动给它加个排序，必然有多出的开销，所以我这里没有改动，遵从原代码。</p>
<p>Laval数据集，在实验室服务器上有一份，在自己租的服务器上还有一份。本来已经只用实验室服务器了，但是寒假时候实验室服务器整机更新，我就没有备份Laval数据集，而是在更新好之后直接从自己租的服务器把Laval数据集传一份到实验室。整机更新之后我接着训练，就出现问题了，loss不但不收敛，还疯狂飙到很高，模型似乎摆烂了。</p>
<p>后来发现，原因是实验室服务器整机更新，更新前后系统硬件或操作系统层面的变化，可能导致了os.listdir()函数在完全一样的目录下不同的输出。这就意味着之前在800张图片上训练好的模型，在新的机器上面对800张还很陌生的图片，于是loss飙升。这种情况，没法复原在老机器上os.listdir()函数的输出顺序，之前训练的模型基本就废了。</p>
<p>好在发现了问题。我在上述两行代码之间加上一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gt_nms.sort() #不排序的话，在另一台机器上解压出大量文件并读取的时候顺序会随机不一样</span><br></pre></td></tr></table></figure>
<p>这行代码强制对os.listdir()的返回结果进行排序。经测试，这种排序不受机器软硬件环境的影响。加上新机器的3090显卡，很快赶上了之前的训练进度。</p>
<ol start="2">
<li>跟据全景贴图求球谐系数</li>
</ol>
<p>见<a href="https://www.jixinlong.top/2023/02/01/%E6%A0%B9%E6%8D%AE%E5%85%A8%E6%99%AF%E8%B4%B4%E5%9B%BE%E6%B1%82%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0/">根据全景贴图求球谐系数 </a></p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>无</p>
<h1 id="下周工作计划"><a href="#下周工作计划" class="headerlink" title="下周工作计划"></a>下周工作计划</h1><!-- 针对本周工作存在的问题，概述下周的工作内容 -->
<ol>
<li>尝试把EMLight从SG模型改成SH模型，训练网络从crop中回归出SH系数。</li>
</ol>
<h1 id="需要协调与支援"><a href="#需要协调与支援" class="headerlink" title="需要协调与支援"></a>需要协调与支援</h1><!-- 额外描述所需硬件、软件及人手 -->]]></content>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云安装Cloudron&amp;&amp;mc服务器踩坑</title>
    <url>/2023/01/22/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%89%E8%A3%85Cloudron&amp;&amp;mc%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>国内外销售云服务器的商家在提供各种原版系统镜像的同时，也会提供一些预装了某种受欢迎的软件、应用或环境的“应用镜像”。</p>
<p>很多人都有开独立博客、独立网站或自行建立某个游戏服的需求，而自己动手做是有门槛的。所以目前出现了一些CMS（内容管理服务）软件，这些软件可以一键完成博客、个人网站、游戏服务器的搭建。国内比较流行的CMS是宝塔面板，国外的我对cloudron熟悉一些。国内的云服务供应商，如腾讯云，就提供了预装宝塔的系统。而国外的vultr提供了预装cloudron的镜像。</p>
<p>cloudron上提供一键安装mc服务器的服务，是真的一键安装！但是vultr比较贵，我试过每月3.5美刀的vultr云服务器能跑起来1.15以下的mc服务器。再往上就因为服务器资源有限而展不开mc的地图了。最主要还是贵，再好一点的vultr机子玩不起。后来我用学生身份在腾讯云上租了台一年40元的机子，配置还比vultr的好，打算用来开mc服务器。直接在原生ubuntu上装java，然后去找mc的服务器文件来运行当然可以，但也是我折腾一会才折腾出来的。假如能在腾讯云近乎白嫖的机子上安装cloudron，然后利用cloudron一键安装mc服务器不是很爽吗？</p>
<p>这篇文章记录了在腾讯云上安装cloudron的记录。</p>
<h2 id="在腾讯云上安装cloudron"><a href="#在腾讯云上安装cloudron" class="headerlink" title="在腾讯云上安装cloudron"></a>在腾讯云上安装cloudron</h2><ol>
<li>新开ubuntu20.04，要给root和ubuntu用户设置密码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo passwd xx </span><br><span class="line"></span><br><span class="line">#并开启ssh密码登陆服务</span><br><span class="line">#找到 #Authentication，将 PasswordAuthentication 参数修改为 yes</span><br><span class="line">#找到 #Authentication，将 PermitRootLogin 参数修改为 yes</span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line">#执行以下命令，重启 ssh 服务</span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure></li>
<li>腾讯云ubuntu20.04默认python为3.X。要修改为2（原生ubuntu无此问题）</li>
</ol>
<p>@import “..&#x2F;LibCode&#x2F;pythonChange.txt” </p>
<ol start="3">
<li><p>根据提示，啥也不要装最先装cloudron。甚至要把已安装的一些删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt autoremove</span><br></pre></td></tr></table></figure></li>
<li><p>按照官方的脚本安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://cloudron.io/cloudron-setup</span><br><span class="line">chmod +x ./cloudron-setup</span><br><span class="line">./cloudron-setup </span><br><span class="line"></span><br><span class="line"> #Follow setup logs in a second terminal with:</span><br><span class="line">tail -f /var/log/cloudron-setup.log</span><br><span class="line"></span><br><span class="line">#耐心等吧，过程漫长，哪里有问题会有报错log一定要去看</span><br><span class="line"></span><br><span class="line">#失败可以使用</span><br><span class="line">./cloudron-setup --help true 接着安装</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>成功安装cloudron :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@VM-16-2-ubuntu:/home/ubuntu# ./cloudron-setup </span><br><span class="line"></span><br><span class="line">##############################################</span><br><span class="line">         Cloudron Setup (latest)</span><br><span class="line">##############################################</span><br><span class="line"></span><br><span class="line"> Follow setup logs in a second terminal with:</span><br><span class="line"> $ tail -f /var/log/cloudron-setup.log</span><br><span class="line"></span><br><span class="line"> Join us at https://forum.cloudron.io for any questions.</span><br><span class="line"></span><br><span class="line">=&gt; Updating apt and installing script dependencies</span><br><span class="line">=&gt; Checking version</span><br><span class="line">=&gt; Downloading version 7.1.3 ...</span><br><span class="line">=&gt; Installing base dependencies and downloading docker images (this takes some time) ...</span><br><span class="line">=&gt; Installing version 7.1.3 (this takes some time) ...</span><br><span class="line">=&gt; Waiting for cloudron to be ready (this takes some time) ....</span><br><span class="line"></span><br><span class="line">After reboot, visit https://&lt;IP&gt; and accept the self-signed certificate to finish setup.</span><br><span class="line"></span><br><span class="line">The server has to be rebooted to apply all the settings. Reboot now ? [Y/n] Y</span><br><span class="line">root@VM-16-2-ubuntu:/home/ubuntu# Connection closing...Socket close.</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照文档指示<br><a href="https://docs.cloudron.io/domains/#cloudflare-dns">https://docs.cloudron.io/domains/#cloudflare-dns</a><br>将cloudflare中为MC创建的API令牌“投放”一个，<br><a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a><br>粘贴到cloudron配置界面。</p>
</li>
<li><p>后续用cloudron安装mc会用到一些端口。可以在腾讯云防火墙面版加一个“ALL”规则，端口全开。</p>
</li>
<li><p>安装降版本的MCF，点击商店里的MCF，然后修改上方浏览器链接里的版本，尝试找更低版本的。</p>
</li>
</ol>
<p><strong>如果是国外服务器，到此就结束了。如果是国内服务器，需要对网站进行备案。</strong> 目前我在备案中，装了cloudron的服务器没法做其他事，可能是端口和一些资源都被占用了， 所以这个配置好的ubuntu20.04被我镜像保存了，算是我做的一个镜像。</p>
]]></content>
      <tags>
        <tag>mc</tag>
        <tag>ubuntu</tag>
        <tag>cloudron</tag>
      </tags>
  </entry>
  <entry>
    <title>没有管理员权限也能安装软件</title>
    <url>/2023/02/01/%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E4%B9%9F%E8%83%BD%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>实验室的服务器是大家共用的，一人一个账号。</p>
<p>为了数据和代码的安全，通常某个师兄&#x2F;师姐负责维护服务器，他的账号拥有管理员权限，能sudo。其他师弟&#x2F;师妹们都是普通账号，不能sudo。</p>
<p>现在python用得很频繁，很多磕盐上的需求在python内部都能解决了，根本不涉及ubuntu系统权限的问题。git等常用工具，管理员也都体贴地预先安装好了。可是仍然有时候会用到一些不常用的软件，不好意思去麻烦师兄单独安装它；网上铺天盖地的sudo apt-get install大法，我又没有sudo的权限，怎么办呢？</p>
<p>其实很多软件考虑到使用者可能没有系统的管理员权限，都是支持二进制代码形式安装的。apt-get是系统级的，从某个仓库直接安装软件，必须用到sudo，用apt是行不通的。去软件的官网上去看其他的安装方式，或者直接搜索“xxx软件二进制安装”。</p>
<p>举个例子，谷歌的编译工具bazel就提供了好几种安装方式，其中的“二进制安装”可以通过加“–user”参数的方式将bazel安装到用户目录下，仅需要用到用户级的权限：<br><img src="/../images/bazel%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85.png" alt="二进制安装"></p>
<p>这就不需要sudo了。</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络训练</title>
    <url>/2023/01/22/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83/</url>
    <content><![CDATA[<p>batch表示一次性投喂给网络的数据量。<span id="more"></span>batch大有利于更快得训练，利用GPU的能力。batch小有利于更精确地收缩。</p>
<p>通过观测训练时的CPU和显卡使用情况，我发现CPU已经跑满了，显卡的GPU和显存的利用率都很低。这种情况下是cpu的限制了整个训练的速度，导致显卡经常无事可做。我关闭了不需要的浏览器界面之后发现CPU利用率仍然是满的，但是显卡利用率变高了。所以训练的时候要根据硬件的情况分配好CPU和显卡的任务，充分利用资源。</p>
<hr>
<p>在谷歌colab上使用免费GPU：直接使用已有FaceColab.ipynb即可。上传自己的faceswap文件夹整体，然后利用FaceColab.ipynb的依赖安装、代码执行工具来训练。</p>
<p>在训练到感觉loss一直降低不下去、图片总是不清晰的时候，按照软件本身的提示<br><img src="/../images/Screenshot%20from%202022-03-15%2018-57-26.png" alt="Screenshot from 2022-03-15 18-57-26"></p>
<p>FaceColab.ipynb中的提示：<br><img src="/../images/Screenshot%20from%202022-03-15%2019-07-08.png" alt="Screenshot from 2022-03-15 19-07-08"></p>
<p>还有论坛上的经验分享<a href="https://forum.faceswap.dev/viewtopic.php?t=1311">faceswap</a>，尝试勾选disabling warp选项，让模型学到更多的面部细节。</p>
<p>colab的免费使用</p>
<ol>
<li>colab的jupyter充当命令行，分段式执行任务非常舒服。文件和数据都存在谷歌云硬盘里。前者可以点击“挂载Google云端硬盘”连接后者，也可以直接在后者中创建好文件直接用colab应用打开。</li>
<li>进入colab后 修改-笔记本设置 勾选GPU，然后    <code>!nvidia-smi </code>可以知道分到了多少显卡资源。</li>
<li><code>!</code>引导的指令相当于在终端中输入指令。左边可以打开文件系统查看。初始路径默认在\content下。酷似用来机器学习的云计算中心。主要需要准确了解要安装的依赖有哪些。</li>
<li>不能连续使用12h。期间据说也容易断，写个脚本维护和colab的连接状态。</li>
<li>如果离开浏览器时间很长任务就会被切断。<br>可以参照范例：</li>
</ol>


<hr>
<h5 id="在超算云平台上："><a href="#在超算云平台上：" class="headerlink" title="在超算云平台上："></a>在超算云平台上：</h5><p>创建conda环境后进入，执行setup.py可以自行安装所有依赖。<br>查看显卡情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch -n 0.5 nvidia-smi</span><br><span class="line">nvidias-smi -l 1</span><br></pre></td></tr></table></figure>
<p>查看cpu使用情况:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>跨设备的工具</title>
    <url>/2023/02/09/%E8%B7%A8%E8%AE%BE%E5%A4%87%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<ul>
<li><p>java<br>  java写的程序运行在jdk上，轻松跨系统。这么看，python也该被夸夸，但是python环境安装起来好像比jdk麻烦，也不如jdk使用得广泛。</p>
</li>
<li><p>vscode</p>
<ul>
<li>vscode支持客户端的设置、扩展在不同设备上同步。在新设备上安装后同步，就能一键还原生产环境。</li>
<li>支持客户端服务端分离，一个客户端能连接很多GPU服务器。</li>
</ul>
</li>
<li><p>firefox</p>
<ul>
<li>火狐的收藏夹同步功能很绝，特别是Ubuntu预装了火狐，在安卓、windows、ubuntu等多个设备上可以保持收藏夹内容的同步。</li>
</ul>
</li>
<li><p>github</p>
<ul>
<li>也是个让多人协作编程的伟大创作，但是git的安装和设置还不够自动化。</li>
</ul>
</li>
<li><p>docker</p>
<ul>
<li>用应用及其依赖的虚拟环境打包，然后随意移植和传播。docker起到中间件的作用，类似于java环境。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo迁移加速</title>
    <url>/2023/02/05/Hexo%E8%BF%81%E7%A7%BB%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>之前的hexo是创建在国内的腾讯云上的，当时撸羊毛，学生机一年40。眼看着要到期了，打算把博客环境迁移到国外的一台小主机上。主要那台小主机我本来就有，是刚需，且价格一年70左右，比腾讯云良心很多。</p>
<p>迁移的主要原因是网站的访问速度太慢了，有人反映半天加载不出来。托管在github上的网页确实是这样的，网速时好时坏。所以我打算把网页直接运行在自己的国外主机上，然后用cloudflare的cdn给网站加速、加密，这样比Github绝对是要快的。</p>
<h1 id="网络代理"><a href="#网络代理" class="headerlink" title="网络代理"></a>网络代理</h1><p>国外的小主机，ip已经被封死了。为了能ssh到它，需要挂梯子，然后在本机上走网络代理去ssh它。<br>xshell自带网络代理功能，但是我的编辑器vscode没有自带的网络代理。写博客vscode又必不可少。所以我搜了些文章，给vscode的国外主机远程配置里边添了一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#走代理</span><br><span class="line">ProxyCommand ncat --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p </span><br></pre></td></tr></table></figure>
<p>这里的ncat是一个软件，我看过了，必须安装它。然后端口根据个人情况，一般梯子里都会看到本地socks5是哪个端口。</p>
<p>这一行添加之后，就可以用vscode远程ip被墙的主机了。</p>
<h1 id="Hexo工程迁移"><a href="#Hexo工程迁移" class="headerlink" title="Hexo工程迁移"></a>Hexo工程迁移</h1><p>Hexo的工程文件都还是在本地的，只有public文件夹下生成的静态文件是托管在github的，所以不能直接从Github克隆整个hexo工程。</p>
<p>最简单的方法是直接拷贝包含以下几个重要的文件、目录的Hexo文件夹到到新的机器上，其他的都丢掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json </span><br><span class="line">scaffolds/ </span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure>
<p>然后重复之前的工作，安装node&#x2F;npm&#x2F;hexo-cli…<br>这个时候hexo-deployer-git其实没必要装了，想装也能装。<br>由于新主机是国外的，各种源也都是国外的，这次直接参考<a href="https://blog.csdn.net/weixin_42176112/article/details/122200295">这篇文章</a>里的第一个nvm方法，直接从就把node和npm装好了，速度快得一批，不像之前在腾讯云上遇到各种问题。<br>此时，hexo工程就已经完整的迁移好了。</p>
<h1 id="用nginx部署Hexo"><a href="#用nginx部署Hexo" class="headerlink" title="用nginx部署Hexo"></a>用nginx部署Hexo</h1><p>原本以为直接在新机器上<code>hexo s -p 80</code>就能搞定，结果试了下没这么简单。搜了一下，基本都用了nginx，有修改hexo自身文件的方法，我不想改动hexo自身的文件太多。</p>
<ul>
<li>先下载nginx</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>看看配置文件在哪<br>-t 是test的意思，让nginx测试一下自己的配置对不对。会显示配置文件的位置“&#x2F;etc&#x2F;nginx&#x2F;nginx.conf”。vscode里直接单击这个文件，就能打开编辑。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@racknerd-88d4c8:~/blog# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改nginx配置</li>
</ul>
<p>首先，把第一行改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user root;</span><br></pre></td></tr></table></figure>
<p>因为我的博客都放在root目录下。</p>
<p>然后，在<code>http &#123;...&#125;</code>里边加上一段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 443 ssl;</span><br><span class="line">	server_name www.jixinlong.top;     # 填写绑定证书的域名</span><br><span class="line">	ssl on;</span><br><span class="line">	ssl_certificate /root/cert/jump.jixinlong.top.cer;</span><br><span class="line">	ssl_certificate_key /root/cert/jump.jixinlong.top.key;</span><br><span class="line">	ssl_session_timeout 5m;</span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    # 按照这个协议配置</span><br><span class="line">	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;     # 按照这个套件配置</span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line">	</span><br><span class="line">	location / &#123;</span><br><span class="line">		root /root/blog/public/;    # 站点目录</span><br><span class="line">		autoindex on;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点是端口443，域名设置，ssl证书位置（我的证书虽然名字是二级域名，但是实际上是通用域名，适用所有的*.jixinlong.top（我的猜的））。</p>
<p>重中之重是站点目录，要写到public目录下。假如还想实现http自动跳转https，再加下边一段，和上边的并列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name  www.jixinlong.top;</span><br><span class="line">	rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，<code>service nginx restart</code>，开启nginx。此nginx服务运行在国外主机的443端口后，并能将80端的访问改到443。外置cloudflare的cdn加速解析，将域名<a href="http://www.jixinlong.top解析到主机ip:443上。">www.jixinlong.top解析到主机ip:443上。</a></p>
<p>爷从此和腾讯云说拜拜了。</p>
<h1 id="用nginx部署其他服务"><a href="#用nginx部署其他服务" class="headerlink" title="用nginx部署其他服务"></a>用nginx部署其他服务</h1><p>上一节中，nginx被配置成监听443端口，并让443端口和系统位置“&#x2F;root&#x2F;blog&#x2F;public&#x2F;”下的静态网页关联起来，实现nginx对hexo所生成的静态的网页的代理。该方法实际上是用自己的nginx服务替换了github pages的托管服务。</p>
<p>nginx还可以有其他代理方式。例如，也可以直接执行<code>hexo s</code>命令，让hexo运行一个在4000端口后的网页服务。然后将域名<a href="http://www.jixinlong.top在443上的location改成：">www.jixinlong.top在443上的location改成：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:8000;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样便很容易的将<a href="https://www.jixinlong.top和本地已经能成功运行的hexo自带服务器关联起来.hexo仅负责提供网页内容,https所需要的证书依然是在nginx中配置./">https://www.jixinlong.top和本地已经能成功运行的hexo自带服务器关联起来。hexo仅负责提供网页内容，https所需要的证书依然是在nginx中配置。</a></p>
<p>受此启发，一个服务器上便可以架设更多的服务或应用，这些服务先都在本地不同端口下调试成功。同时，设定不同的域名来对应不同的服务，虽然这些域名解析到同一个ip，但是可以在nginx里设置，让他们对应上服务器上不同端口后的服务。例如，<a href="http://www.jixinlong.top用于个人博客,master.jixinlong.top用于挂导师评价网的静态文件/">www.jixinlong.top用于个人博客，master.jixinlong.top用于挂导师评价网的静态文件</a>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 443 ssl;</span><br><span class="line">	server_name jump.jixinlong.top;     # 填写绑定证书的域名</span><br><span class="line">	ssl on;</span><br><span class="line">	ssl_certificate /root/cert/jump.jixinlong.top.cer;</span><br><span class="line">	ssl_certificate_key /root/cert/jump.jixinlong.top.key;</span><br><span class="line">	ssl_session_timeout 5m;</span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    # 按照这个协议配置</span><br><span class="line">	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;     # 按照这个套件配置</span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line">	# return 500;</span><br><span class="line">	</span><br><span class="line">	location / &#123;</span><br><span class="line">		root /root/blog/public/;    # 站点目录</span><br><span class="line">		autoindex on;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	server &#123;</span><br><span class="line">	listen 443 ssl;</span><br><span class="line">	server_name master.jixinlong.top;     # 填写绑定证书的域名</span><br><span class="line">	ssl on;</span><br><span class="line">	ssl_certificate /root/cert/jump.jixinlong.top.cer;</span><br><span class="line">	ssl_certificate_key /root/cert/jump.jixinlong.top.key;</span><br><span class="line">	ssl_session_timeout 5m;</span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    # 按照这个协议配置</span><br><span class="line">	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;     # 按照这个套件配置</span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line">	# return 500;</span><br><span class="line">	</span><br><span class="line">	location / &#123;</span><br><span class="line">		root /root/导师评价/html/;    # 站点目录</span><br><span class="line">		autoindex on;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>!!! 1 注意，在原先已经为jump.jixinlong.top配置过ssl证书的基础上，新增二级域名来对应服务器上新的服务时，无需重新申请ssl证书，只需要在域名解析那里用一个CNAME记录将新域名指向原域名。即：</p>
<p>jump.jixinlong.top（申请ssl证书）–&gt; 真实ip    https访问网站成功</p>
<p>再添加功能：<br><a href="http://www.jixinlong.top/">www.jixinlong.top</a> –&gt; jump.jixinlong.top  nginx代理<a href="http://www.jixinlong.top/">www.jixinlong.top</a><br>master.jixinlong.top –&gt; jump.jixinlong.top  nginx代理master.jixinlong.top</p>
<p>nginx检查第一次输入CNAME前的域名来区分不同的服务，而ssl证书主要看CNAME的最终域名。</p>
<h1 id="禁用IP直接访问网站"><a href="#禁用IP直接访问网站" class="headerlink" title="禁用IP直接访问网站"></a>禁用IP直接访问网站</h1><p>网站到IP的解析已经被加密。<br>为了防止IP暴露时有人反向试探出该IP上的网站，需要在nginx里设置禁用IP直接访问网站。<strong>单独添加</strong>以下两段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#http</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80 default_server;</span><br><span class="line">	server_name  _; #禁止ip方式访问网站</span><br><span class="line">	return 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># https </span><br><span class="line">server &#123;</span><br><span class="line">	listen 443 ssl default;#default表示该端口确定，但是域名、证书等不确定时都显示此服务。</span><br><span class="line">	server_name _;</span><br><span class="line">	ssl_certificate /root/cert/jump.jixinlong.top.cer;</span><br><span class="line">	ssl_certificate_key /root/cert/jump.jixinlong.top.key;</span><br><span class="line">	return 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其含义是，涉及80端口和443端口上的访问默认展示403界面。配合着其他“server”段对 域名-代理端口-服务地址或端口 的明确指定，就能保住用户指定的域名访问之外所有访问都返回以403。</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>x-ui高级设定</title>
    <url>/2023/02/17/x-ui%E9%AB%98%E7%BA%A7%E8%AE%BE%E5%AE%9A/</url>
    <content><![CDATA[<p>x-ui是基于xray的套壳管理面板，优点是用起来简单，缺点是每个端口只能设定一个uuid，无法在分享给其他人使用的时候防止滥用，也无法精确监控每个用户的使用情况。</p>
<p>下面给出一些思路：</p>
<h1 id="使用者身份设定"><a href="#使用者身份设定" class="headerlink" title="使用者身份设定"></a>使用者身份设定</h1><ul>
<li>假定使用者是某个学校校园网内的全体学生，那么可以利用校园网来限定使用者身份。</li>
</ul>
<ol>
<li><p>将订阅链接在公网上公开，但是订阅链接的内容只能在内网中成功订阅。方法是在内网运行一个服务器专门发布订阅链接的内容。外加是不是的更新节点内容，这样就能保证只有内网的用户才能用到服务。</p>
</li>
<li><p>校园网在公网上一般是一个公网ip区间，倘若能探明这个区间，就能直接从节点、订阅层面限定使用者范围。从订阅层面，同上，在nginx里可以设定订阅链接的内容仅某些ip可访问。从节点层面，可以在xray之前统一经过443端口的nginx反代，由nginx检查使用者的ip。</p>
</li>
</ol>
<ul>
<li>可以利用校园邮箱来限定使用者身份。<br>为了保护隐私，用邮箱验证需要先自建一个邮箱系统。</li>
</ul>
<ol>
<li>手动验证。要求使用者用校园邮箱发送申请，邮件里包含一个合法的uuid，然后管理员将此uuid添加到后台。目前的x-ui原版的config.json是每次restart时被x-ui.db覆盖的，而x-ui.db不支持一个端口多个用户。所以需要另起config1.json，放在原config一起，让xray启动时合并读取config；还有fork版本的x-ui，支持单个端口后多用户的设定，可以用。</li>
<li>自动验证。所有的操作最后都应该自动化。可以想办法将邮件内容接收、uuid读取、config添加等工作写成代码，用合并读取config的方式来完成这个工作。</li>
</ol>
<h1 id="匿名交易"><a href="#匿名交易" class="headerlink" title="匿名交易"></a>匿名交易</h1><p>倘若需要匿名交易功能，可能需要使用paypal。</p>
]]></content>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>基于ipv6-ddns的PC建站方式</title>
    <url>/2023/02/19/%E5%9F%BA%E4%BA%8Eipv6-ddns%E7%9A%84PC%E5%BB%BA%E7%AB%99%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>偶然发现实验室的电脑都分配了很多ipv6地址，且有很多是公网地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eno1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.108.11.94  netmask 255.255.254.0  broadcast 10.108.11.255</span><br><span class="line">        inet6 2001:da8:204:1086:ad28:ff67:94a7:1997  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2001:da8:204:1086:b9b8:9136:3ef3:6be6  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2001:da8:204:1086:f455:5fa0:b6ca:63c  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fd00:f484:8d1f:b661::1066  prefixlen 128  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::7258:dd48:9547:6be3  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fd00:f484:8d1f:b661:41f7:aed6:af12:5f13  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2001:da8:204:1086:a1e4:69cb:2d82:3f54  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fd00:f484:8d1f:b661:b2b0:dbde:63f4:d9e0  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2001:da8:204:1086:fc1b:66d8:b2b5:8904  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        ether e4:54:e8:77:f5:f3  txqueuelen 1000  (以太网)</span><br><span class="line">        RX packets 52881182  bytes 10069311241 (10.0 GB)</span><br><span class="line">        RX errors 0  dropped 26069  overruns 0  frame 0</span><br><span class="line">        TX packets 2549468  bytes 249593912 (249.5 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device interrupt 16  memory 0xe5400000-e5420000  </span><br></pre></td></tr></table></figure>

<p>那么就不需要ipv4公网ip了。据说现在ipv6普及，家里的宽带也都有ipv6地址。</p>
<p>但是ipv6地址都是被分配的，且没法固定，这个时候可以用dns解析托管商的ddns服务。很简单，其实就是获取托管商那里的一些key，然后在本地写脚本获取ipv6地址并PUSH到托管商那里更新ip。<br>具体见：<a href="https://zhuanlan.zhihu.com/p/69379645">基于 Cloudflare DNS API 部署 IPv6 DDNS</a></p>
<h1 id="困难"><a href="#困难" class="headerlink" title="困难"></a>困难</h1><p>但我遇到一个问题，就是直接采用上述链接里的脚本时，会尝试将所有带<global>标记的ip地址加到域名上。而域名解析只能一对一！<br>其实用这种方法无法将输出列表里的fd00开头的地址剔除出去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jxl@vostro-5090-china-hdd-protection:~$ ip -6 addr show dev eno1 | grep &#x27;global temporary&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;/&quot; &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">fd00:f484:8d1f:b661:b2b0:dbde:63f4:d9e0</span><br><span class="line">2001:da8:204:1086:f455:5fa0:b6ca:63c</span><br><span class="line">2001:da8:204:1086:fc1b:66d8:b2b5:8904</span><br><span class="line">2001:da8:204:1086:a1e4:69cb:2d82:3f54</span><br><span class="line">2001:da8:204:1086:ad28:ff67:94a7:1997</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是不知道为什么，fd00这种总在列表头部，实际想要获取的2001开头地址在尾部。那么可以在命令管道后面在再加上一个tail -1，输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jxl@vostro-5090-china-hdd-protection:~$ ip -6 addr show dev eno1 | grep &#x27;global temporary&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | awk -F &quot;/&quot; &#x27;&#123;print $1&#125;&#x27;|tail -1</span><br><span class="line">2001:da8:204:1086:ad28:ff67:94a7:1997</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>获得了想要的ipv6公网地址！</p>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>ipv6公网地址通过ddns绑定到域名上，任何闲置主机就都能变成云服务器了。</p>
<ul>
<li>ipv6支持ssh，以后在任何地方都能轻松登陆自家电脑</li>
<li>必须要一个公网云服务器做中转的frp类内网穿透方法将被取代</li>
<li>mc服务器等可以开在自己的电脑上</li>
<li>可以在自己的服务器上自建云盘、博客</li>
<li>旧电脑将可以被利用，收费昂贵性能也有限的阿里云、腾讯云不再成为小服务器玩家的首选。</li>
</ul>
<p>缺点也有，就是ipv6开起来的服务不能被只支持ipv4的网络用户访问。当然随着ipv6大力普及，这个缺点越来越小。</p>
<h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>本来搞ipv6 ddns是想在主机上建一个饥荒服务器的…</p>
<p>结果照着<a href="https://github.com/qinming99/dst-admin">饥荒面板服</a>的教程走完，发现饥荒开服根本就不需要服务器有固定公网ip。它实际上是把个人的服务器统一登记在科雷服务器上，然后让玩家去访问科雷。<br>不过因为实验室电脑会自行断网，安装过程总是报网络原因的错误，我还以为是需要挂梯子，挂了也没用。最后重新用脚本连接下校园网，就非常顺滑地安装完了。<br>唉，安装环境总担心是资源在国外需要挂梯子的，也就中国程序员和伊朗程序员了…………</p>
]]></content>
      <tags>
        <tag>server</tag>
        <tag>ddns</tag>
      </tags>
  </entry>
</search>
